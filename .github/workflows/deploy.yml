name: Build and Deploy with Self-hosted Runner

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the docker image using hardcoded repository name
        docker build -t $ECR_REGISTRY/streamlit-apps:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/streamlit-apps:$IMAGE_TAG $ECR_REGISTRY/streamlit-apps:latest
        
        # Push the docker images
        docker push $ECR_REGISTRY/streamlit-apps:$IMAGE_TAG
        docker push $ECR_REGISTRY/streamlit-apps:latest
      
    - name: Install Nginx
      run: |
        # Install Nginx if not installed
        if ! command -v nginx &> /dev/null; then
            echo "Installing Nginx..."
            sudo apt-get update
            sudo apt-get install -y nginx
        fi
        
        # Create directories if they don't exist
        sudo mkdir -p /etc/nginx/sites-available
        sudo mkdir -p /etc/nginx/sites-enabled
      
    - name: Deploy Container
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Stop any existing container
        docker stop streamlit-container 2>/dev/null || true
        docker rm streamlit-container 2>/dev/null || true
        
        # Run the container with hardcoded repository name
        docker run -d --name streamlit-container -p 8501:8501 --restart always $ECR_REGISTRY/streamlit-apps:$IMAGE_TAG
        
        # Configure Nginx
        echo "Creating Nginx configuration..."
        cat > /tmp/streamlit_nginx << 'EOL'
        server {
            listen 80;
            server_name _;

            location / {
                proxy_pass http://localhost:8501;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 86400;
            }
        }
        EOL
        sudo cp /tmp/streamlit_nginx /etc/nginx/sites-available/streamlit
        sudo ln -sf /etc/nginx/sites-available/streamlit /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
        sudo nginx -t
        sudo systemctl restart nginx